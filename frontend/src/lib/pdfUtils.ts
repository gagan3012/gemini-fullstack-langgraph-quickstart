import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import type { Message } from "@langchain/langgraph-sdk";

export interface PDFGenerationOptions {
  title?: string;
  subtitle?: string;
  includeTimestamp?: boolean;
  customFooter?: string;
}

export const generatePDF = async (
  messages: Message[],
  options: PDFGenerationOptions = {}
): Promise<void> => {
  const {
    title = "Babloo.ai Enterprise Research Report",
    subtitle = "AI-Powered Analysis & Grading",
    includeTimestamp = true,
    customFooter = "Generated by Babloo.ai - Enterprise AI Research Platform"
  } = options;

  // Create a temporary container for rendering
  const tempContainer = document.createElement('div');
  tempContainer.style.position = 'absolute';
  tempContainer.style.left = '-9999px';
  tempContainer.style.top = '0';
  tempContainer.style.width = '210mm'; // A4 width
  tempContainer.style.padding = '20mm';
  tempContainer.style.backgroundColor = '#ffffff';
  tempContainer.style.color = '#000000';
  tempContainer.style.fontFamily = 'Arial, sans-serif';
  tempContainer.style.fontSize = '12px';
  tempContainer.style.lineHeight = '1.6';
  
  document.body.appendChild(tempContainer);

  try {
    // Generate HTML content
    const htmlContent = generateHTMLContent(messages, { title, subtitle, includeTimestamp, customFooter });
    tempContainer.innerHTML = htmlContent;

    // Apply PDF-specific styles
    const tables = tempContainer.querySelectorAll('table');
    tables.forEach(table => {
      (table as HTMLElement).style.borderCollapse = 'collapse';
      (table as HTMLElement).style.width = '100%';
      (table as HTMLElement).style.marginBottom = '20px';
      (table as HTMLElement).style.border = '1px solid #ddd';
    });

    const cells = tempContainer.querySelectorAll('th, td');
    cells.forEach(cell => {
      (cell as HTMLElement).style.border = '1px solid #ddd';
      (cell as HTMLElement).style.padding = '8px';
      (cell as HTMLElement).style.textAlign = 'left';
    });

    const headers = tempContainer.querySelectorAll('th');
    headers.forEach(header => {
      (header as HTMLElement).style.backgroundColor = '#f5f5f5';
      (header as HTMLElement).style.fontWeight = 'bold';
    });

    // Add grade cell styling
    const gradeCells = tempContainer.querySelectorAll('.grade-cell');
    gradeCells.forEach(cell => {
      (cell as HTMLElement).style.textAlign = 'center';
      (cell as HTMLElement).style.fontWeight = 'bold';
      (cell as HTMLElement).style.padding = '10px';
    });

    // Convert to canvas and then to PDF
    const canvas = await html2canvas(tempContainer, {
      scale: 2,
      useCORS: true,
      allowTaint: true,
      backgroundColor: '#ffffff',
      height: tempContainer.scrollHeight,
      width: tempContainer.scrollWidth
    });

    const imgData = canvas.toDataURL('image/png');
    const pdf = new jsPDF('p', 'mm', 'a4');
    
    const pdfWidth = pdf.internal.pageSize.getWidth();
    const pdfHeight = pdf.internal.pageSize.getHeight();
    const imgWidth = pdfWidth - 20; // 10mm margin on each side
    const imgHeight = (canvas.height * imgWidth) / canvas.width;
    
    let heightLeft = imgHeight;
    let position = 10; // 10mm top margin

    // Add first page
    pdf.addImage(imgData, 'PNG', 10, position, imgWidth, imgHeight);
    heightLeft -= (pdfHeight - 20); // Account for margins

    // Add additional pages if needed
    while (heightLeft > 0) {
      position = heightLeft - imgHeight + 10;
      pdf.addPage();
      pdf.addImage(imgData, 'PNG', 10, position, imgWidth, imgHeight);
      heightLeft -= (pdfHeight - 20);
    }

    // Generate filename with timestamp
    const timestamp = new Date().toISOString().split('T')[0];
    const filename = `babloo-ai-report-${timestamp}.pdf`;
    
    // Download the PDF
    pdf.save(filename);

  } finally {
    // Clean up
    document.body.removeChild(tempContainer);
  }
};

const generateHTMLContent = (
  messages: Message[],
  options: PDFGenerationOptions
): string => {
  const { title, subtitle, includeTimestamp, customFooter } = options;
  const timestamp = new Date().toLocaleString();
  
  let content = `
    <div style="text-align: center; margin-bottom: 30px; border-bottom: 2px solid #4f46e5; padding-bottom: 20px;">
      <h1 style="color: #4f46e5; margin: 0; font-size: 24px; font-weight: bold;">${title}</h1>
      <h2 style="color: #6b7280; margin: 10px 0 0 0; font-size: 16px; font-weight: normal;">${subtitle}</h2>
      ${includeTimestamp ? `<p style="color: #9ca3af; margin: 10px 0 0 0; font-size: 12px;">Generated on ${timestamp}</p>` : ''}
    </div>
  `;

  messages.forEach((message, index) => {
    if (message.type === 'human') {
      content += `
        <div style="margin-bottom: 25px;">
          <h3 style="color: #4f46e5; margin-bottom: 10px; font-size: 16px; font-weight: bold;">
            üîç Research Query ${index === 0 ? '' : `#${Math.floor(index / 2) + 1}`}
          </h3>
          <div style="background-color: #f8fafc; padding: 15px; border-left: 4px solid #4f46e5; border-radius: 0 8px 8px 0;">
            ${formatMessageContent(message.content)}
          </div>
        </div>
      `;
    } else {
      content += `
        <div style="margin-bottom: 30px;">
          <h3 style="color: #059669; margin-bottom: 15px; font-size: 16px; font-weight: bold; display: flex; align-items: center;">
            ü§ñ AI Analysis & Response
          </h3>
          <div style="background-color: #f9fafb; padding: 20px; border: 1px solid #e5e7eb; border-radius: 8px;">
            ${formatMessageContent(message.content)}
          </div>
        </div>
      `;
    }
  });

  if (customFooter) {
    content += `
      <div style="margin-top: 40px; padding-top: 20px; border-top: 1px solid #e5e7eb; text-align: center; color: #6b7280; font-size: 10px;">
        ${customFooter}
      </div>
    `;
  }

  return content;
};

const formatMessageContent = (content: string | object): string => {
  let text = typeof content === 'string' ? content : JSON.stringify(content);
  
  // Convert markdown headers to HTML
  text = text.replace(/^### (.*$)/gm, '<h4 style="color: #374151; margin: 20px 0 10px 0; font-size: 14px; font-weight: bold;">$1</h4>');
  text = text.replace(/^## (.*$)/gm, '<h3 style="color: #374151; margin: 25px 0 15px 0; font-size: 16px; font-weight: bold;">$1</h3>');
  text = text.replace(/^# (.*$)/gm, '<h2 style="color: #374151; margin: 30px 0 20px 0; font-size: 18px; font-weight: bold;">$1</h2>');
  
  // Convert markdown tables to HTML tables
  text = convertMarkdownTablesToHTML(text);
  
  // Convert markdown bold/italic
  text = text.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
  text = text.replace(/\*(.*?)\*/g, '<em>$1</em>');
  
  // Convert line breaks
  text = text.replace(/\n\n/g, '</p><p style="margin: 12px 0;">');
  text = text.replace(/\n/g, '<br>');
  
  // Wrap in paragraph if not already wrapped
  if (!text.includes('<p>') && !text.includes('<table>') && !text.includes('<h')) {
    text = `<p style="margin: 12px 0;">${text}</p>`;
  }
  
  return text;
};

const convertMarkdownTablesToHTML = (text: string): string => {
  const tableRegex = /\|(.+)\|\n\|[-\s|]+\|\n((?:\|.+\|\n?)*)/g;
  
  return text.replace(tableRegex, (_match, header, rows) => {
    const headerCells = header.split('|').map((cell: string) => cell.trim()).filter((cell: string) => cell);
    const headerRow = headerCells.map((cell: string) => `<th>${cell}</th>`).join('');
    
    const bodyRows = rows.trim().split('\n').map((row: string) => {
      const cells = row.split('|').map((cell: string) => cell.trim()).filter((cell: string) => cell);
      return '<tr>' + cells.map((cell: string) => {
        // Check if cell contains a grade (A-F)
        const isGrade = /^[A-F][+-]?$/.test(cell.trim());
        const gradeClass = isGrade ? 'class="grade-cell"' : '';
        const gradeStyle = isGrade ? getGradeStyle(cell.trim()) : '';
        return `<td ${gradeClass} style="${gradeStyle}">${cell}</td>`;
      }).join('') + '</tr>';
    }).join('');
    
    return `<table style="width: 100%; border-collapse: collapse; margin: 20px 0; border: 1px solid #ddd;">
      <thead><tr style="background-color: #f5f5f5;">${headerRow}</tr></thead>
      <tbody>${bodyRows}</tbody>
    </table>`;
  });
};

const getGradeStyle = (grade: string): string => {
  const gradeColors: Record<string, string> = {
    'A': 'background-color: #dcfce7; color: #166534;',
    'B': 'background-color: #dbeafe; color: #1e40af;',
    'C': 'background-color: #fef3c7; color: #92400e;',
    'D': 'background-color: #fed7aa; color: #c2410c;',
    'F': 'background-color: #fecaca; color: #dc2626;'
  };
  
  const firstChar = grade.charAt(0);
  return gradeColors[firstChar] || '';
};
